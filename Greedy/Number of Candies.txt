/* Number of Candies 
Problem Description

There are N children standing in a line. Each child is assigned a rating value.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?



Problem Constraints
1 <= N <= 105
-109 <= A[i] <= 109



Input Format
First and only argument is an integer array A representing the rating of children.



Output Format
Return an integer, representing the minimum candies to be given.



Example Input
Input 1:

 A = [1, 2]
Input 2:

 A = [1, 5, 2, 1]


Example Output
Output 1:

 3
Output 2:

 7


Example Explanation
Explanation 1:

 The candidate with 1 rating gets 1 candy and candidate with rating 2 cannot get 1 candy as 1 is its neighbor. 
 So rating 2 candidate gets 2 candies. In total, 2 + 1 = 3 candies need to be given out.
Explanation 2:

 Candies given = [1, 3, 2, 1]

*/
==============================================================================================================
Approach1:
=========
struct CandiesRating{
    int index;
    int r;
};
bool compare(CandiesRating a1,CandiesRating a2){
    return (a1.r<a2.r);
}
int Solution::candy(vector<int> &A) {
    int n=A.size();
    vector<int> ans(n,0);
    vector<int> left(n,0);
    left[0]=1;
    vector<int> right(n,0);
    right[n-1]=1;
    for(int i=1;i<n;i++){
        if(A[i]>A[i-1])
          left[i]=1+left[i-1];
        else
         left[i]=1;
    }
    for(int i=n-2;i>=0;i--){
        if(A[i+1]<A[i])
          right[i]=1+right[i+1];
        else
         right[i]=1;
    }
    int count=0;
    for(int i=0;i<n;i++){
      count=count+max(left[i],right[i]);
      //cout<<right[i]<<" ";
    }
    return count;

}
================================================================================
Approach2:
=========
struct CandiesRating{
    int index;
    int r;
};
bool compare(CandiesRating a1,CandiesRating a2){
    return (a1.r<a2.r);
}
int Solution::candy(vector<int> &A) {
    int n=A.size();
    vector<int> ans(n,0);
    CandiesRating arr[n];
    for(int i=0;i<n;i++){
        arr[i].index=i;
        arr[i].r=A[i];
    }
    sort(arr,arr+n,compare);
    int pos=0;
    int currcandy=0;
    int count=0;
    for(int i=0;i<n;i++){
        pos=arr[i].index;
        currcandy=0;
        if(pos>0 && A[pos-1]<A[pos])
          currcandy=ans[pos-1];
        if(pos<n-1 && A[pos+1]<A[pos])
            currcandy=max(currcandy,ans[pos+1]);
        ans[pos]=1+currcandy;
        count+=ans[pos];
    }
    return count;
}
=================================================================================
Author Solution:
================

class Solution {
    public:
        int candy(vector<int> &ratings) {
            int candiesCnt = 0, curCandy, pos;
            
            vector<pair<int, int> > valueWithPos;
            
            for (int i = 0; i < ratings.size(); i++) {
                valueWithPos.push_back(make_pair(ratings[i], i));
            }
            
            sort(valueWithPos.begin(), valueWithPos.end());
            
            vector<int> candies (ratings.size(), 0);
            
            for (int i = 0; i < valueWithPos.size(); i++) {
                pos = valueWithPos[i].second;
                curCandy = 0;
            
                if (pos > 0 && ratings[pos - 1] < ratings[pos]) {
                    curCandy = candies[pos - 1];
                } 
            
                if (pos < ratings.size() - 1 && ratings[pos + 1] < ratings[pos]) {
                    curCandy = max(curCandy, candies[pos + 1]);
                }
                candies[pos] = curCandy + 1;
                candiesCnt += candies[pos];
            }
            return candiesCnt;
        }
};