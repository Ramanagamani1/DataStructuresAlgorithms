Problem Description
Given a matrix of integers A of size N x M consisting of 0, 1 or 2.

Each cell can have three values:

The value 0 representing an empty cell.

The value 1 representing a fresh orange.

The value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (Left, Right, Top, or Bottom) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.

Note: Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.



Problem Constraints
1 <= N, M <= 1000

0 <= A[i][j] <= 2



Input Format
The first argument given is the integer matrix A.



Output Format
Return the minimum number of minutes that must elapse until no cell has a fresh orange.

If this is impossible, return -1 instead.



Example Input
Input 1:

A = [   [2, 1, 1]
        [1, 1, 0]
        [0, 1, 1]   ]
Input 2:

 
A = [   [2, 1, 1]
        [0, 1, 1]
        [1, 0, 1]   ]


Example Output
Output 1:

 4
Output 2:

 -1


Example Explanation
Explanation 1:

 Max of 4 using (0,0) , (0,1) , (1,1) , (1,2) , (2,2)
Explanation 2:

 Task is impossible

Code:
====

int Solution::solve(vector<vector<int> > &A) {
    queue<pair<int,int>> q;
    int time=0;
    int orange=0;
    for(int i=0;i<A.size();i++){
        for(int j=0;j<A[0].size();j++){
            if(A[i][j]==1){
                orange+=1;
            }
            if(A[i][j]==2){
                q.push({i,j});
            }
        }
    }
    int n=A.size();
    int m=A[0].size();
    vector<int> rows={0,1,-1,0};
    vector<int> cols={1,0,0,-1};
    while(orange!=0 && !q.empty()) {
        int size=q.size();
        for(int i=0;i<size;i++){
              int x=q.front().first;
              int y=q.front().second;
              q.pop();
              for(int i=0;i<4;i++){
                   int rowx=x+rows[i];
                   int coly=y+cols[i];
                   if(rowx>=0 && coly>=0 && rowx<n && coly<m && A[rowx][coly]==1){
                         A[rowx][coly]=2;
                         orange-=1;
                         q.push({rowx,coly});
                   }
              }
        }
        time=time+1;
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++) {
            if(A[i][j]==1)
              return -1;
        }
    }
    return time;
}
