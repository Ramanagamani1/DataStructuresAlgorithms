/* Given a collection of integers denoted by array A of size N that might contain duplicates, return all possible subsets.

NOTE:

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
The subsets must be sorted lexicographically.


Problem Constraints
0 <= N <= 16



Input Format
Only argument is an integer array A of size N.



Output Format
Return a 2-D vector denoting all the possible subsets.



Example Input
Input 1:

 A = [1, 2, 2]
Input 2:

 A = [1, 1]


Example Output
Output 1:

 [
    [],
    [1],
    [1, 2],
    [1, 2, 2],
    [2],
    [2, 2]
 ]
Output 2:

 [
    [],
    [1],
    [1, 1]
 ]


Example Explanation
Explanation 1:

All the subsets of the array [1, 2, 2] in lexicographically sorted order. */

=================================================================================

void generateSubsets(vector<int> &A,set<vector<int>> &ans,vector<int> &temp,int i){
        if(i==A.size()){
            ans.insert(temp);
            return ;
        }
        generateSubsets(A,ans,temp,i+1);
        temp.push_back(A[i]);
        generateSubsets(A,ans,temp,i+1);
        temp.pop_back();
        return ;
}

vector<vector<int> > Solution::subsetsWithDup(vector<int> &A) {

     set<vector<int>> ans;
     vector<int> temp;
     sort(A.begin(),A.end());
     generateSubsets(A,ans,temp,0);
     vector<vector<int>> res;
     for(auto it=ans.begin();it!=ans.end();it++)
            res.push_back(*it);
     sort(res.begin(),res.end());
     return res;
}
