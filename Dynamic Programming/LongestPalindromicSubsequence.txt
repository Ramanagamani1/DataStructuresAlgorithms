/*Longest Palindromic Subsequence
Problem Description

Given a string A. Find the longest palindromic subsequence (A subsequence which does not need to be contiguous and is a palindrome).

You need to return the length of longest palindromic subsequence.



Problem Constraints
1 <= length of(A) <= 103



Input Format
First and only integer is a string A.



Output Format
Return an integer denoting the length of longest palindromic subsequence.



Example Input
Input 1:

 A = "bebeeed"
Input 2:

 A = "aedsead"


Example Output
Output 1:

 4
Output 2:

 5


Example Explanation
Explanation 1:

 The longest palindromic subsequence is "eeee", which has a length of 4.
Explanation 2:

 The longest palindromic subsequence is "aedea", which has a length of 5.*/

=============================================================================
int LPS(string A,int i,int j,vector<vector<int>> &dp){
    if(i==j)
       return 1;
    if(i>j)
       return 0;
    if(dp[i][j]!=-1)
        return dp[i][j];
    if(A[i]==A[j]){
        dp[i][j]=2+LPS(A,i+1,j-1,dp);
    }
    else{
        dp[i][j]=max(LPS(A,i+1,j,dp),LPS(A,i,j-1,dp));
    }
    return dp[i][j];
}
int Solution::solve(string A) {
    vector<vector<int>> dp(A.length()+1, vector<int>(A.length()+1, -1));
    return LPS(A,0,A.size()-1,dp);
}

Bottom-up:
==========
int Solution::solve(string A) {
    int n = A.size();
    int i, j, cl;
    int L[n][n]; // Create a table to store results of subproblems 

    // Strings of length 1 are palindrome of lentgh 1 
    for (i = 0; i < n; i++)
        L[i][i] = 1;

    // Build the table. Note that the lower diagonal values of table are useless and not filled in the process.
    for (cl = 2; cl <= n; cl++) {
        for (i = 0; i < n - cl + 1; i++) {
            j = i + cl - 1;
            if (A[i] == A[j] && cl == 2)
                L[i][j] = 2;
            else if (A[i] == A[j])
                L[i][j] = L[i + 1][j - 1] + 2;
            else
                L[i][j] = max(L[i][j - 1], L[i + 1][j]);
        }
    }
    return L[0][n - 1];
}