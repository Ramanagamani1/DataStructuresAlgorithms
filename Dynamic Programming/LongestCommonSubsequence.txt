/*Longest Common Subsequence
Problem Description

Given two strings A and B. Find the longest common subsequence ( A sequence which does not need to be contiguous), which is common in both the strings.

You need to return the length of such longest common subsequence.



Problem Constraints
1 <= Length of A, B <= 1005



Input Format
First argument is a string A.
Second argument is a string B.



Output Format
Return an integer denoting the length of the longest common subsequence.



Example Input
Input 1:

 A = "abbcdgf"
 B = "bbadcgf"
Input 2:

 A = "aaaaaa"
 B = "ababab"


Example Output
Output 1:

 5
Output 2:

 3


Example Explanation
Explanation 1:

 The longest common subsequence is "bbcgf", which has a length of 5.
Explanation 2:

 The longest common subsequence is "aaa", which has a length of 3.*/
==============================================================================
Bottom-up:

int Solution::solve(string A, string B) {
    int lcs[A.length()+1][B.length()+1];
    for(int i=0;i<A.length()+1;i++){
        lcs[i][0]=0;
    }
    for(int i=0;i<B.length()+1;i++){
        lcs[0][i]=0;
    }
    for(int i=1;i<=A.length();i++){
        for(int j=1;j<=B.length();j++){
            if(A[i-1]==B[j-1])
               lcs[i][j]=lcs[i-1][j-1]+1;
            else
              lcs[i][j]=max(lcs[i][j-1],lcs[i-1][j]);
        }
    }
    return lcs[A.length()][B.length()];
}

Top-down:
-----------

dp[la][lb]={-1};
int lcs(string A,string B,int la,int lb){
   if(la==0 || lb==0)
       return 0;
   if(dp[la-1][lb-1]!=-1)
       return dp[la-1][lb-1];
   if(A[la-1]==B[lb-1])
       dp[la-1][lb-1]=1+lcs(A,B,la-1,lb-1);
   else
     dp[la-1][lb-1]=max(lcs(A,B,la-1,lb),lcs(A,B,la,lb-1);

   return dp[la-1][lb-1];
}














